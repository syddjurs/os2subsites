<?php

/**
 * @file
 * Code for the OS2web Kulturnaut events feature.
 */

include_once 'os2web_kulturnaut_events.features.inc';

/**
 * Implements hook_cron().
 */
function os2web_kulturnaut_events_cron() {
  /**
  watchdog('cron', 'Node unpublish task started');

  $type = 'os2web_kulturnaut_knactivity';
  $query = new \EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $type)
      ->propertyCondition('status', NODE_PUBLISHED)
      ->execute();

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    $i = 0;
    $unpublished_nodes = array();

    foreach ($nodes as $node) {
      $node_end_date_str = $node->field_os2web_kulturnaut_date['und'][0]['value2'];

      $node_end_date = DateTime::createFromFormat('Y-m-d h:i:s', $node_end_date_str);
      $current_date = new DateTime('now');

      if ($current_date > $node_end_date) {
        $node->status = NODE_NOT_PUBLISHED;
        node_save($node);
        $i++;
        $unpublished_nodes[] = $node->nid;
        watchdog('cron', 'Node ' . $node->nid . ' unpublished');
      }
    }
    watchdog('cron', 'Nodes unpublished: '. $i . ' ('. implode(',', $unpublished_nodes) . ')');
  }
  else{
    watchdog('cron', 'No publeshed nodes found');
  }
  watchdog('cron', 'Node unpublish task finished');
*/
}

/**
 * Implements hook_feeds_presave().
 */

function os2web_kulturnaut_events_feeds_presave(FeedsSource $source, $entity, $item) {

  if ($source->importer->id == 'kulturnaut_begivenheder_oplevsyddjurs_') {
    // Get excluded taxonomy Tema names
      $excluded_names = _os2web_kulturnaut_events_get_excluded_names('os2web_kulturnaut_tema');
    // Do not import excluded event types
    if (array_intersect($item['jsonpath_parser:21'], $excluded_names)) {
      $entity->feeds_item->skip = TRUE;
      drupal_set_message(t("Skipping event with '%tema>>%subtema' tema", array('%tema' => $item['jsonpath_parser:22'], '%subtema' => $item['jsonpath_parser:20'])), 'warning');
    }
    
    // Get excluded taxonomy Venue names
      $excluded_names = _os2web_kulturnaut_events_get_excluded_names('os2web_taxonomies_tax_places');
    // Do not import excluded event locations
    if (in_array($item['jsonpath_parser:2'], $excluded_names)) {
      $entity->feeds_item->skip = TRUE;
      drupal_set_message(t("Skipping event with '%venue' location", array('%venue' => $item['jsonpath_parser:2'])), 'warning');
    }
        
    // Get excluded taxonomy Stikord names
      $excluded_names = _os2web_kulturnaut_events_get_excluded_names('os2web_taxonomies_tax_editor_tag');
    // Do not import excluded event locations
    if (array_intersect($item['jsonpath_parser:23'], $excluded_names)) {
      $entity->feeds_item->skip = TRUE;
      drupal_set_message(t("Skipping event with '%tag' tag(s)", array('%tag' => implode(', ', $item['jsonpath_parser:23']))), 'warning');
    }
    
  }
  
  //Parse event end time from human friendly string format
  $event_time_feed = $item['jsonpath_parser:13'];

  if (!empty(explode('-', $event_time_feed)[1])) {
    $end_time_str = trim(explode('-', $event_time_feed)[1]);
  }
  elseif (!empty(explode('til ca.', $event_time_feed)[1])) {
    $end_time_str = trim(explode('til ca.', $event_time_feed)[1]);
  }
  elseif (!empty(explode('kursusdage kl.', $event_time_feed)[1])) {
    $end_time_str = trim(explode('kursusdage kl.', $event_time_feed)[1]);
  }
  else {
    $end_time_str = trim(str_ireplace('Fra kl.', '', $event_time_feed));
    $end_time_str = trim(str_ireplace('kl.', '', $event_time_feed));
  }

  if (strlen($end_time_str) == '2') {
    $end_time_str = $end_time_str . ':00';
  }elseif (strlen($end_time_str) == '5') {
    $end_time_str = str_replace('.', ':', $end_time_str);
  }
//Add seconds
  $end_time_str = $end_time_str . ':00';

//If parsing successful use it
  if (\DateTime::createFromFormat('H:i:s', $end_time_str)) {
    $entity->field_os2web_kulturnaut_date['und'][0]['value2'] = trim(substr_replace($entity->field_os2web_kulturnaut_date['und'][0]['value2'], $end_time_str, -8));
  }
}

/**
 * Get excluded term names by vocabulary
 * 
 * @param string $vocabulary_name
 * @return array $excluded_names
 */
function _os2web_kulturnaut_events_get_excluded_names($vocabulary_name) {

  $vocab = taxonomy_vocabulary_machine_name_load($vocabulary_name);
  $query = new EntityFieldQuery();
  $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', $vocabulary_name)
      ->propertyCondition('vid', $vocab->vid)
      ->fieldCondition('field_os2web_kult_tema_feed_exc', 'value', '1', '=');
  $results = $query->execute();
  if (!empty($results['taxonomy_term'])) {
    foreach ($results['taxonomy_term'] as $tid) {
      $term = taxonomy_term_load($tid->tid);
      $name = $term->name;
      $excluded_names[] = $name;
    }
  }
  else {
    $excluded_names = array();
  }
  return $excluded_names;
}