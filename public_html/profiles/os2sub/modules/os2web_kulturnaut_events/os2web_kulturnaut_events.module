<?php

/**
 * @file
 * Code for the OS2web Kulturnaut events feature.
 */

include_once 'os2web_kulturnaut_events.features.inc';

/**
 * Implements hook_cron().
 */
function os2web_kulturnaut_events_cron() {
  watchdog('cron', 'Node deleting task started');

  $type = 'os2web_kulturnaut_knactivity';
  $query = new \EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', $type)
      ->execute();

  if (!empty($result['node'])) {
    $nids = array_keys($result['node']);
    $nodes = node_load_multiple($nids);
    $i = 0;
    $deleted_nodes = array();

    foreach ($nodes as $node) {
      $node_end_date_str = $node->field_os2web_kulturnaut_date['und'][0]['value2'];

      $node_end_date = DateTime::createFromFormat('Y-m-d H:i:s', $node_end_date_str);
      $current_date = new DateTime('now');

      if ($current_date > $node_end_date) {
        $i++;
        $deleted_nodes[] = $node->nid;
        watchdog('cron', 'Node ' . $node->nid . ' deleted');
        node_delete($node->nid);
      }
    }
    watchdog('cron', 'Nodes deleted: '. $i . ' ('. implode(',', $deleted_nodes) . ')');
  }
  else{
    watchdog('cron', 'No publeshed nodes found');
  }
  watchdog('cron', 'Node deleting task finished');
}

/**
 * Implements hook_feeds_presave().
 */
function os2web_kulturnaut_events_feeds_presave(FeedsSource $source, $entity, $item) {

  if ($source->importer->id == 'kulturnaut_begivenheder_oplevsyddjurs_') {
    // Get excluded taxonomy Tema names
    $excluded_names = _os2web_kulturnaut_events_get_excluded_names('os2web_kulturnaut_tema');
    // Do not import excluded event types
    if (array_intersect($item['jsonpath_parser:21'], $excluded_names)) {
      $entity->feeds_item->skip = TRUE;
      drupal_set_message(t("Skipping event with '%tema>>%subtema' tema. Title: '%title'", array('%title' => $item['jsonpath_parser:0'], '%tema' => $item['jsonpath_parser:22'], '%subtema' => $item['jsonpath_parser:20'])), 'warning');
    }

    // Get excluded taxonomy Venue names
    $excluded_names = _os2web_kulturnaut_events_get_excluded_names('os2web_taxonomies_tax_places');
    // Do not import excluded event locations
    if (in_array($item['jsonpath_parser:2'], $excluded_names)) {
      $entity->feeds_item->skip = TRUE;
      drupal_set_message(t("Skipping event with '%venue' location. Title: '%title'", array('%title' => $item['jsonpath_parser:0'], '%venue' => $item['jsonpath_parser:2'])), 'warning');
    }

    // Get excluded taxonomy Stikord names
    $excluded_names = _os2web_kulturnaut_events_get_excluded_names('os2web_taxonomies_tax_editor_tag');
    // Do not import excluded event locations
    if (array_intersect($item['jsonpath_parser:23'], $excluded_names)) {
      $entity->feeds_item->skip = TRUE;
      drupal_set_message(t("Skipping event with '%tag' tag(s). Title: '%title'", array('%title' => $item['jsonpath_parser:0'], '%tag' => implode(', ', $item['jsonpath_parser:23']))), 'warning');
    }
  }

  //Parse event end time from human friendly string format
  $event_time_feed = $item['jsonpath_parser:13'];

  if (!empty(explode('-', $event_time_feed)[1])) {
    $end_time_str = trim(explode('-', $event_time_feed)[1]);
  }
  elseif (!empty(explode('til ca.', $event_time_feed)[1])) {
    $end_time_str = trim(explode('til ca.', $event_time_feed)[1]);
  }
  elseif (!empty(explode('kursusdage kl.', $event_time_feed)[1])) {
    $end_time_str = trim(explode('kursusdage kl.', $event_time_feed)[1]);
  }
  else {
    $end_time_str = trim(str_ireplace('Fra kl.', '', $event_time_feed));
    $end_time_str = trim(str_ireplace('kl.', '', $event_time_feed));
  }

  if (strlen($end_time_str) == '2') {
    $end_time_str = $end_time_str . ':00';
  }
  elseif (strlen($end_time_str) == '5') {
    $end_time_str = str_replace('.', ':', $end_time_str);
  }
//Add seconds
  $end_time_str = $end_time_str . ':00';

  if ($end_time_str == '24:00:00') {
    drupal_set_message(t("Non standart endtime on event '%title', use '23:59:00' instead", array('%title' => $item['jsonpath_parser:0'])), 'warning');
    $end_time_str = '23:59:00';
  }

//If parsing successful use it
  if (\DateTime::createFromFormat('H:i:s', $end_time_str)) {
    $entity->field_os2web_kulturnaut_date['und'][0]['value2'] = trim(substr_replace($entity->field_os2web_kulturnaut_date['und'][0]['value2'], $end_time_str, -8));
  }
  else {
    drupal_set_message(t("Can not parse endtime '%str' use 00:00:00 instead on event '%event'"), array('%str' => $item['jsonpath_parser:13'], '%event' => $item['jsonpath_parser:0']), 'warning');
    $entity->field_os2web_kulturnaut_date['und'][0]['value2'] = trim(substr_replace($entity->field_os2web_kulturnaut_date['und'][0]['value2'], '00:00:00', -8));
  }

  if (strlen($item['jsonpath_parser:16']) == 5) {
    if($item['jsonpath_parser:16'] == '24:00'){
      drupal_set_message(t("Non standart starttime on event '%title', use '23:59:00' instead", array('%title' => $item['jsonpath_parser:0'])), 'warning');
      $item['jsonpath_parser:16'] = '23:59';
    }
    $entity->field_os2web_kulturnaut_date['und'][0]['value'] = trim(substr_replace($entity->field_os2web_kulturnaut_date['und'][0]['value'], $item['jsonpath_parser:16'] . ':00', -8));
  }
  else {
    $entity->field_os2web_kulturnaut_date['und'][0]['value'] = trim(substr_replace($entity->field_os2web_kulturnaut_date['und'][0]['value'], '00:00:00', -8));
    drupal_set_message(t("Non standart starttime on event '%title', use '00:00:00' instead", array('%title' => $item['jsonpath_parser:0'])), 'warning');
  }
  $event_end_date = DateTime::createFromFormat('Y-m-d H:i:s', $entity->field_os2web_kulturnaut_date['und'][0]['value2']);
  $current_date = new DateTime('now');
  if($current_date < $event_end_date) {
    $entity->status = 1;
  }
  drupal_set_message(t("Startdate: '%start_v', Enddate: '%end_v', Title: '%title'", array('%title' => $item['jsonpath_parser:0'], '%end_v' => $entity->field_os2web_kulturnaut_date['und'][0]['value2'], '%start_v' => $entity->field_os2web_kulturnaut_date['und'][0]['value'])), 'warning');
}

/**
 * Get excluded term names by vocabulary
 *
 * @param string $vocabulary_name
 * @return array $excluded_names
 */
function _os2web_kulturnaut_events_get_excluded_names($vocabulary_name) {

  $vocab = taxonomy_vocabulary_machine_name_load($vocabulary_name);
  $query = new EntityFieldQuery();
  $query
      ->entityCondition('entity_type', 'taxonomy_term')
      ->entityCondition('bundle', $vocabulary_name)
      ->propertyCondition('vid', $vocab->vid)
      ->fieldCondition('field_os2web_kult_tema_feed_exc', 'value', '1', '=');
  $results = $query->execute();
  if (!empty($results['taxonomy_term'])) {
    foreach ($results['taxonomy_term'] as $tid) {
      $term = taxonomy_term_load($tid->tid);
      $name = $term->name;
      $excluded_names[] = $name;
    }
  }
  else {
    $excluded_names = array();
  }
  return $excluded_names;
}

/**
 * Implements hook_form_alter().
 */
function os2web_kulturnaut_events_form_alter(&$form, &$form_state, $form_id) {


  // We need to tune oplevsyddjurs_forside_kalender view filter form
  if ($form['#id'] == "views-exposed-form-oplevsyddjurs-forside-kalender-panel-pane-1") {
    $form['kategori']['#access'] = FALSE;
    $form['target_group']['#access'] = FALSE;
    if (!empty($form_state['input']['egennavne_stednavne'])) {
      $taxonomnyQuery = new EntityFieldQuery();
      $egennavne_stednavne_terms = taxonomy_term_load_multiple(array(), array('tid' => $form_state['input']['egennavne_stednavne']));
      $kategori_arr = array();
      if (isset($egennavne_stednavne_terms)) {
        foreach ($egennavne_stednavne_terms as $egennavne_stednavne_term) {
          // 'For Børn' from egennavne_stednavne vocabulary is a signal to search by 'Børn' term from 'target_group' vocabulary.
          if($egennavne_stednavne_term->name == 'For Børn'){
            $target_group_term = taxonomy_get_term_by_name('Børn', 'target_group');
            $form['target_group']['#value'] = array(array_shift($target_group_term)->tid);
            continue;
          }
          if (!empty($egennavne_stednavne_term->field_os2web_kulturnaut_tema)) {
            foreach ($egennavne_stednavne_term->field_os2web_kulturnaut_tema['und'] as $category) {
              $kategori_arr[] = $category['tid'];
            }
          }
          // Get childrens of the 'egennavne_stednavne' terms.
          $childrens = taxonomy_get_children($term->tid, $term->vid);
          if (!empty($childrens)) {
            foreach ($childrens as $children) {
              if (!empty($children->field_os2web_kulturnaut_tema)) {
                foreach ($children->field_os2web_kulturnaut_tema['und'] as $category) {
                  $kategori_arr[] = $category['tid'];
                }
              }
            }
          }
        }
      }
      $kategori_arr = array_unique($kategori_arr);
      // Get childrens of kategori terms
      if (!empty($kategori_arr)) {
        $kategori_children_arr = array();
        $taxonomnyQuery = new EntityFieldQuery();
        $kategori_terms = taxonomy_term_load_multiple(array(), array('tid' => $kategori_arr));
        if (isset($kategori_terms)) {
          foreach ($kategori_terms as $kategori_term) {
            $kategori_childrens = taxonomy_get_children($kategori_term->tid, $kategori_term->vid);
            foreach ($kategori_childrens as $kategori_children) {
              $kategori_children_arr[] = $kategori_children->tid;
            }
          }
          $kategori_arr = array_merge($kategori_arr, $kategori_children_arr);
          $kategori_arr = array_unique($kategori_arr);

          $form['kategori']['#value'] = $kategori_arr;

        }
      }
    }
  }

  if ($form_id == 'os2web_kulturnaut_knactivity_node_form' && !$form['nid']['#value']) {
    drupal_set_message(t('Indhold til kultunaut kan også oprettes via gosyddjurs.dk - oprettes de begge stedder kommer de dobbelt ind i kultunaut'), 'warning');
  }
}

/**
 * Implements hook_views_pre_view().
 */
function os2web_kulturnaut_events_views_pre_view(&$view, &$display_id, &$args) {

  if ('oplevsyddjurs_andre_events' == $view->name && 'panel_pane_1' == $view->current_display) {
    $args = array();
    if ($node = menu_get_object()) {
      foreach($node->field_os2web_kulturnaut_tema['und'] as $term_id){
        $args[] =  $term_id['tid'];
      }
    }
  $args = implode('+' , $args);
  $args = array($args);
  }
}
